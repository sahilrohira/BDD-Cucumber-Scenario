package stepdefs.Masters;

import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import db.SM_POG_CATEGORY_Table;
import pages.Master.POGHierarchy;
import pages.apex.ApexButton;
import pages.apex.ApexNotification;
import pages.apex.ApexPageHeader;
import pages.apex.ApexTextField;
import stepdefs.common.CommonPageSteps;
import stepdefs.common.Hook;
import stepdefs.common.SuperStepdefs;
import utils.AppData;

public class Masters_POGHierarchyPageSteps extends SuperStepdefs {

	private String pageName = "Masters_POGHierarchy";
	private CommonPageSteps commonPageSteps;
	private ApexButton apextButton;
	private POGHierarchy pogHierarchy;
	private ApexTextField apexTextField;
	private SM_POG_CATEGORY_Table sm_pog_category_table;
	private ApexPageHeader apexPageHeader;
	private ApexNotification apexNotification;

	public Masters_POGHierarchyPageSteps(Hook hook) {
		super(hook);
		apextButton = new ApexButton(driver, testCaseId);
		apexTextField = new ApexTextField(driver, testCaseId);
		commonPageSteps = new CommonPageSteps(hook);
		pogHierarchy = new POGHierarchy(driver, testCaseId);;
		sm_pog_category_table=new SM_POG_CATEGORY_Table(con, testCaseId);
		apexPageHeader=new ApexPageHeader(driver, testCaseId);
		apexNotification=new ApexNotification(driver, testCaseId);
	}

	/**
	 * @author Shubhank.garg
	 * 
	 */
	@When("^From Master POGHierarchy Page, Click On \"(.*)\" Button$")
	public void clickOnButton(String buttonName) throws Exception {
		apextButton.clickOnButton(pageName, buttonName);
		logger.pass("From " + pageName + ", Click On " + bold(buttonName) + " Button");
	}
	
	@Then("^Validate all hierarchy expanded")
	public void validateelementpresentforexpandedandnotcollapsed() throws Exception {
		pogHierarchy.validateElementExist("all expanded", "true");
		pogHierarchy.validateElementnotExist("all copalsed", "false");
		logger.pass("Validated all Hierarchy is expanded and no Single Collpased Hirarchy is present");
	}
	@Then("^Validate all hierarchy collapsed")
	public void validateelementpresentforcollapsedandnotexpanded() throws Exception {
		pogHierarchy.validateElementExist("all collapsed", "false");
		pogHierarchy.validateElementnotExist("all expanded", "true");
		logger.pass("Validated all Hierarchy is collpsed and no Single expanded Hirarchy is present");
	}
	
	@Then("Add Division with Division ID as \"(.*)\" and Division Name as \"(.*)\" and Usage Type as \"(.*)\" and default Exclude Indicator$")
	public void addDivision(String divID,String divName,String usageType) throws Exception {
		int ranNum = AppData.getRandomNumberBetweenRange(1,9999);
		storeTempData("DIVISION_ID", divID+ranNum);
		storeTempData("DIVISION_NAME", divName+ranNum);
		apexTextField.enterText(pageName, "P27_DIVISION", "DIVISION_ID");
		apexTextField.enterText(pageName, "P27_DIVISION_NAME", "DIVISION_NAME");
		commonPageSteps.selectDropDownValue("P27_USAGE_TYPE", usageType);
		//commonPageSteps.selectDropDownValue("P27_MET_DIS_UNIT", usageType);
		commonPageSteps.clickOnButton("Add");
		logger.pass("New Division added with Division ID as "+ bold(divID+ranNum)+" Division Name as " + bold(divName+ranNum));
	}
	@Then("Add Department with Department ID as \"(.*)\",Department Name as \"(.*)\",Category from Database and Display Indicator as \"(.*)\" and other default values$")
	public void addDepartment(String departID,String departName,String disInd) throws Exception {
		String division=getTempData("DIVISION_ID")+"-"+getTempData("DIVISION_NAME");
		commonPageSteps.selectDropDownValue("P30_DIVISION", division.toUpperCase());
		int ranNum = AppData.getRandomNumberBetweenRange(1,9999);
		storeTempData("DEPARTMENT_ID", departID+ranNum);
		storeTempData("DEPARTMENT_NAME", departName+ranNum);
		String category=sm_pog_category_table.getPOGCatCodeandCatName();
		apexTextField.enterText(pageName, "P30_DEPT", "DEPARTMENT_ID");
		apexTextField.enterText(pageName, "P30_DEPT_NAME", "DEPARTMENT_NAME");
		commonPageSteps.selectDropDownValue("P30_CATEGORY", category);
		apexTextField.enterText(pageName, "P30_DEPT_SHORT_DESC", "Auto_Script_short_desc_dept");
		//commonPageSteps.selectDropDownValue("P27_USAGE_TYPE", usageType);
		commonPageSteps.selectDropDownValue("P30_DEFAULT_DISPLAY_IND", disInd);
		//commonPageSteps.selectDropDownValue("P30_DEFAULT_DISPLAY_TYPE", "Dept Name");
		commonPageSteps.clickOnButton("Add");
		logger.pass("New Department added with Department as "+ bold(departID+ranNum)+" Department Name as " + bold(departName+ranNum)+" and Category as " +bold(category));
	}
	
	@Then("Add Sub Department with Sub Department as \"(.*)\",Sub Department Name as \"(.*)\" and other default values$")
	public void addSubDepartment(String subdepartID,String subdepartName) throws Exception {
		String division=getTempData("DIVISION_ID")+"-"+getTempData("DIVISION_NAME");
		commonPageSteps.selectDropDownValue("P36_DIVISION", division.toUpperCase());
		String department=getTempData("DEPARTMENT_ID")+"-"+getTempData("DEPARTMENT_NAME");
		commonPageSteps.selectDropDownValue("P36_DEPARTMENT", department.toUpperCase());
		int ranNum = AppData.getRandomNumberBetweenRange(1,9999);
		storeTempData("SUBDEPARTMENT_ID", subdepartID+ranNum);
		storeTempData("SUBDEPARTMENT_NAME", subdepartName+ranNum);
		apexTextField.enterText(pageName, "P36_SUBDEPT", "SUBDEPARTMENT_ID");
		apexTextField.enterText(pageName, "P36_SUBDEPT_NAME", "SUBDEPARTMENT_NAME");
		apexTextField.enterText(pageName, "P36_SUBDEPT_SHORT_DESC", "Auto_Script_short_desc_subDept");
		//commonPageSteps.selectDropDownValue("P36_USAGE_TYPE", usageType);
		//commonPageSteps.selectDropDownValue("P36_DEFAULT_DISPLAY_IND", disInd);
		//commonPageSteps.selectDropDownValue("P36_DEFAULT_DISPLAY_TYPE", "Dept Name");
		//commonPageSteps.selectDropDownValue("P36_MET_DIS_UNIT", "");
		apexTextField.enterText(pageName, "P36_REFERENCE_VALUE", "SUBDEPARTMENT_ID");
		//apexTextField.enterText(pageName, "P36_MIN_METERAGE", "1");
		//apexTextField.enterText(pageName, "P36_MAX_METERAGE", "10");
		commonPageSteps.clickOnButton("Add");
		logger.pass("New Sub Department added with Department as "+ bold(subdepartID+ranNum)+" Department Name as " + bold(subdepartName+ranNum));
	}
	
		@When("^Click on toggle Element for \"(.*)\"$")
		public void clickOntaggleButton(String text) throws Exception {
		if(getTempData(text)!=null) text=getTempData(text);	
		 pogHierarchy.clickontoggleElementwithText(text);
			logger.pass("From " + pageName + ", Click On toggle button with text as" + bold(text));
		}
		
		 
		@Then("Validate that select Category From DB should not be deleted in POG Category")
		public void validateCategorycannotbeDeleted() throws Exception {
			String category=getTempData("CATEGORY");
			String[] catCodeName=category.split(" - ");
			String catCode=catCodeName[0];
			commonPageSteps.clickOnTopMenuLink("Masters");
			apexPageHeader.clickOnHeader3Link(category, "POG Category");
			apexTextField.enterText(pageName, "search_field", catCode);
			apextButton.clickOnButton(pageName, "Go");
			commonPageSteps.deleteRowinTable(1, "ig_grid");
			apexNotification.verifyErrorMessageContent("APEX - SM-0001 Child Record Exists, Cannot Delete Parent Record.");
			commonPageSteps.clickOnTopMenuLink("Masters");
			apexPageHeader.clickOnHeader3Link(category, "POG Hierarchy");
			logger.pass("Successfully Validated that Category cannot be removed onced added in Department.");
		}
}
