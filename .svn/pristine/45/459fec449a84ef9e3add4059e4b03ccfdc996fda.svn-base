package stepdefs.batch;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import cucumber.api.java.en.Then;
import db.AX_PROGRAM_MASTER_Table;
import pages.apex.ApexAlert;
import stepdefs.common.Hook;
import stepdefs.common.SuperStepdefs;
import utils.AppData;
import utils.SFTPFunctions;
import utils.SHHFunctions;

public class DownLoadSteps extends SuperStepdefs {
	public ApexAlert apexAlert;

	public DownLoadSteps(final Hook hook) {
		super(hook);
		this.apexAlert = new ApexAlert(this.driver, this.testCaseId);
	}

	@Then("^Download Interface For Batch \"(.*)\"$")
	public void downloadInterface(String jobName) throws Exception {
		jobName = jobName.toLowerCase();

		AX_PROGRAM_MASTER_Table ax_PROGRAM_MASTER_Table = new AX_PROGRAM_MASTER_Table(con, testCaseId);
		String[] bu_id = ax_PROGRAM_MASTER_Table.getBU_Ids(jobName);
		String username = envData.get("Unix_username");
		String pass = envData.get("Unix_password");
		String ipAddress = envData.get("Unix_host");
		int port = Integer.parseInt(envData.get("Unix_port"));

		String unixScriptPath = envData.get("Unix_script_path");
		String unix_outbox_path = envData.get("Unix_outbox_path");
		try {

			SHHFunctions shhFunctions = new SHHFunctions();
			SFTPFunctions sftpFunctions = new SFTPFunctions();

			shhFunctions.openSHHConnection(username, pass, ipAddress, port);

			String refreshCommand = unixScriptPath + "ax_refresh_program.sh " + jobName;
			shhFunctions.sendCommand(refreshCommand, 1);

			String runCommand = unixScriptPath + "ax_run_program.sh " + jobName;
			shhFunctions.sendCommand(runCommand, 5);

			sftpFunctions.getSFTPConnection(username, pass, ipAddress, port);
			final String downloadFolderPath = "Test_Reports/" + this.testCaseId + "/Server_File/";

			if (bu_id == null) {
				String downloadFilePrefix = getDownloadFileName(jobName) + "_";
				String downloadedFileName = sftpFunctions.getLatestFile(downloadFilePrefix);
				sftpFunctions.downloadSFTPFile(unix_outbox_path + downloadedFileName, downloadFolderPath);
			} else {
				for (int i = 0; i < bu_id.length; i++) {
					String downloadFilePrefix = getDownloadFileName(jobName) + bu_id[i] + "_";
					String downloadedFileName = sftpFunctions.getLatestFile(downloadFilePrefix);
					sftpFunctions.downloadSFTPFile(unix_outbox_path + downloadedFileName, downloadFolderPath);
				}
			}
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	@Then("^Import File From Local System to Server for pog \"(.*)\" and with file name as \"(.*)\" and file ext \"(.*)\" for Bu Id \"(.*)\"$")
	public void uploadFileFromSystemToServer(String pogCode, String fileName, String fileExt, String buId)
			throws Exception {
		if (getTempData(pogCode) != null)
			pogCode = getTempData(pogCode);
		String username = envData.get("Unix_username");
		String pass = envData.get("Unix_password");
		String ipAddress = envData.get("Unix_host");
		int port = Integer.parseInt(envData.get("Unix_port"));
		String unixScriptPath = envData.get("Unix_script_path");
		String unix_pog_file_path = envData.get("Unix_pog_file_path");

		String newFileName = AppData.buId + '_' + pogCode + '.' + fileExt;
		storeTempData("uploadedFileName", newFileName);

		FileInputStream fis = new FileInputStream(
				System.getProperty("user.dir") + File.separator + "Upload" + File.separator + fileName + "." + fileExt);

		FileOutputStream fos = new FileOutputStream(
				System.getProperty("user.dir") + File.separator + "Upload" + File.separator + newFileName);

		int b;
		while ((b = fis.read()) != -1)
			fos.write(b);

		fis.close();
		fos.close();

		try {

			SFTPFunctions sftpFunctions = new SFTPFunctions();
			sftpFunctions.getSFTPConnection(username, pass, ipAddress, port);
			sftpFunctions.uploadSFTPFile(
					System.getProperty("user.dir") + File.separator + "Upload" + File.separator + newFileName,
					unix_pog_file_path);

		} catch (

		Throwable e) {
			e.printStackTrace();
		}
		try {
			SHHFunctions shhFunctions = new SHHFunctions();
			shhFunctions.openSHHConnection(username, pass, ipAddress, port);
			if (fileExt.equalsIgnoreCase("pdf")) {
				String runCommand = unixScriptPath + "sm_batch_file_upld.sh" + " upld_pog_pdf_"
						+ AppData.buId.toLowerCase() + " N";

				shhFunctions.sendCommand(runCommand, 5);
			} else if (fileExt.equalsIgnoreCase("zip")) {
				String runCommand = unixScriptPath + "sm_batch_file_upld.sh" + " upld_pog_pdf_zip_"
						+ AppData.buId.toLowerCase() + " N";

				shhFunctions.sendCommand(runCommand, 5);
			}

			else if (fileExt.equalsIgnoreCase("xlsx")) {
				String runCommand = unixScriptPath + "sm_batch_file_upld.sh" + " upld_pog_pdf_xlsx_"
						+ AppData.buId.toLowerCase() + " N";

				shhFunctions.sendCommand(runCommand, 5);
			}

		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	@Then("^Rename existing XML and update file \"(.*)\" node values for pogCode, pogName, transactionNo, systemTime$")
	public void updateXMLFileValuesForPOGCodeUpload(String fileName) throws Exception {
		try {
			DateTimeFormatter transactionNo = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
			DateTimeFormatter systemTime = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
			LocalDateTime now = LocalDateTime.now();
			String transNum = transactionNo.format(now);
			String sysTime = systemTime.format(now);
			/* create a copy of existing file */
			FileInputStream fis = new FileInputStream(System.getProperty("user.dir") + File.separator + "Upload"
					+ File.separator + fileName + "." + "xml");

			String newFileName = "SPACEMAN_POG_MASTER_" + AppData.buId + '_' + transNum + '.' + "xml";

			storeTempData("newXMLFileName", newFileName);

			FileOutputStream fos = new FileOutputStream(
					System.getProperty("user.dir") + File.separator + "Upload" + File.separator + newFileName);

			int b;
			while ((b = fis.read()) != -1)
				fos.write(b);

			fis.close();
			fos.close();

			String filepath = System.getProperty("user.dir") + File.separator + "Upload" + File.separator + newFileName;

			File file = new File(filepath);
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document document = docBuilder.parse(file);

			/* Update Transaction No and System Time node values from SMGHEAD tag */
			Node MSGHEAD = document.getElementsByTagName("MSGHEAD").item(0);

			NodeList nodes1 = MSGHEAD.getChildNodes();
			for (int i = 0; i < nodes1.getLength(); i++) {
				Node element = nodes1.item(i);
				if ("TRANSACTION_NO".equals(element.getNodeName())) {
					element.setTextContent(transNum);
				}
				if ("SYSTEM_TIME".equals(element.getNodeName())) {
					element.setTextContent(sysTime);
				}

			}

			/* Update POG Code and POG Name node values from POG tag */
			Node POG = document.getElementsByTagName("POG").item(1);
			Random rand = new Random();
			int rand_int1 = rand.nextInt(1000);
			String updateVal = "AUTO" + rand_int1;
			storeTempData("newPOGCode", updateVal);

			NodeList nodes2 = POG.getChildNodes();
			for (int i = 0; i < nodes2.getLength(); i++) {
				Node element = nodes2.item(i);
				if ("POG_CODE".equals(element.getNodeName())) {
					element.setTextContent(updateVal);
				}
				if ("POG_NAME".equals(element.getNodeName())) {
					element.setTextContent(updateVal);
				}

			}

			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(document);
			StreamResult result = new StreamResult(new File(filepath));
			transformer.transform(source, result);

			System.out.println("Done");

		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		} catch (TransformerException tfe) {
			tfe.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} catch (SAXException sae) {
			sae.printStackTrace();
		}
		logger.pass("XMl file name renamed and values updated successfully");

	}

	@Then("^upload File From Local System to Server to create POG and with file name as \"(.*)\"$")
	public void uploadFileFromSystemToServerToCreatePOGCode(String fileName) throws Exception {
		if (getTempData(fileName) != null)
			fileName = getTempData(fileName);
		String username = envData.get("Unix_username");
		String pass = envData.get("Unix_password");
		String ipAddress = envData.get("Unix_host");
		int port = Integer.parseInt(envData.get("Unix_port"));

		String unixScriptPath = envData.get("Unix_script_path");
		String UnixInboxPath = envData.get("Unix_inbox_path");

		try {

			SFTPFunctions sftpFunctions = new SFTPFunctions();

			sftpFunctions.getSFTPConnection(username, pass, ipAddress, port);

			sftpFunctions.uploadSFTPFile(
					System.getProperty("user.dir") + File.separator + "Upload" + File.separator + fileName,
					UnixInboxPath);

		} catch (

		Throwable e) {
			e.printStackTrace();
		}
		try {
			SHHFunctions shhFunctions = new SHHFunctions();
			shhFunctions.openSHHConnection(username, pass, ipAddress, port);
			String runCommand = unixScriptPath + "ax_file_upld.sh " + "mw_pog_master_upld";
			String runCommand1 = unixScriptPath + "ax_refresh_program.sh " + "mw_pog_master_upld";
			String runCommand2 = unixScriptPath + "ax_run_program.sh " + "mw_pog_master_upld";

			shhFunctions.sendCommand(runCommand, 5);
			shhFunctions.sendCommand(runCommand1, 5);
			shhFunctions.sendCommand(runCommand2, 5);
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	@Then("^Run Batch \"(.*)\" irrespective of BU_ID$")
	public void runBatchJob(String jobName) throws Exception {
		jobName = jobName.toLowerCase();
		String username = envData.get("Unix_username");
		String pass = envData.get("Unix_password");
		String ipAddress = envData.get("Unix_host");
		int port = Integer.parseInt(envData.get("Unix_port"));
		String unixScriptPath = envData.get("Unix_script_path");
		try {
			SHHFunctions shhFunctions = new SHHFunctions();
			shhFunctions.openSHHConnection(username, pass, ipAddress, port);
			String refreshCommand = unixScriptPath + "ax_refresh_program.sh " + jobName;
			shhFunctions.sendCommand(refreshCommand, 1);
			String runCommand = unixScriptPath + "ax_run_program.sh " + jobName;
			shhFunctions.sendCommand(runCommand, 10);
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	private String getDownloadFileName(String jobName) {
		String downloadFileName = "";

		switch (jobName.toUpperCase()) {
		case "BO_FIXTURE_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_FIXTURE_";
			break;
		case "BO_ITEM_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_ITEM_";
			break;
		case "BO_POG_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_POG_";
			break;
		case "BO_POG_MODULE_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_PACKAGE_WTC_";
			break;
		case "BO_STORE_ATTR_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_STORE_ATTR_";
			break;
		case "BO_STORE_ATTR_VAL_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_STORE_ATTR_VAL_";
			break;
		case "BO_STORE_MASTER_DNLD":
			downloadFileName = "SPACE_BOSPACE_STORE_";
			break;
		case "POG_MASTER_JSON_DNLD":
			downloadFileName = "SPACE_IMANAGE_POG_ITEM_";
			break;
		case "RETEK_POG_MASTER_DNLD":
			downloadFileName = "space_retek_pog_WTC";
			break;
		case "BO_FLOOR_LAYOUT_DNLD":
			downloadFileName = "SPACE_BOSPACE_FLR_LAYOUT_";
			break;
		case "BO_FLOOR_PLAN_DNLD":
			downloadFileName = "SPACE_BOSPACE_POG_FIX_FLR_";
			break;
		case "BO_ITEM_PACK_DNLD":
			downloadFileName = "SPACE_BOSPACE_ITEM_PACK_WTC_";
			break;// takes 30+ min
		case "BO_ITEM_UDA_DNLD":
			downloadFileName = "SPACE_BOSPACE_ITEM_UDA_";
			break;
		case "BO_STORE_ATTR_DNLD":
			downloadFileName = "SPACE_BOSPACE_ATTR_STORE_";
			break;
		case "BO_POG_MODULE_DNLD":
			downloadFileName = "SPACE_BOSPACE_POG_MOD_WTC_";
			break;
		case "BO_STORE_UDA_DNLD":
			downloadFileName = "SPACE_BOSPACE_STORE_UDA_";
			break;

		case "BO_UDA_VALUES_DNLD":
			downloadFileName = "SPACE_BOSPACE_UDA_VALUES_";
			break;
		case "DAILY_STORE_OSD_DNLD":
			downloadFileName = "WTC_SP_OSD_Daily_";
			break; // .csv file
		case "DNLD_DWG_PDF":
			downloadFileName = "";
			break; // no file created
		case "DNLD_FLOOR_PLAN_PDF":
			downloadFileName = "";
			break; // some test file downloaded
		case "DNLD_LIVE_FP_PDF":
			downloadFileName = "WTC_LIVE_FP_";
			break;
		case "DNLD_LIVE_POG_PDF":
			downloadFileName = "WTC_LIVE_POG_";
			break;
		case "DNLD_LIVE_POG_PDF_DELTA":
			downloadFileName = "";
			break; // no file created
		case "DNLD_POG_PDF":
			downloadFileName = "";
			break; // no file created
		case "POG_HIER_JSON_DNLD":
			downloadFileName = "SPACE_IMANAGE_POG_HIER_";
			break;
		case "POGC_STORE_TARGET_JSON_DNLD":
			downloadFileName = "SPACE_IMANAGE_STORE_POGC_TARGET_";
			break;
		case "PPTM_PRICE_TAG_DNLD":
			downloadFileName = "";
			break; // no file created
		case "PROM_STORE_OSD_DNLD":
			downloadFileName = "";
			break;// no file created
		case "RETEK_POG_ITEM_DNLD":
			downloadFileName = "BUY_PLNPROD_DATA_WTCHK_20191105101823.dat";
			break; // bat file
		case "RETEK_POG_ITEM_MY_DNLD":
			downloadFileName = "";
			break; // no file created
		case "RETEK_POG_ITEM_SG_DNLD":
			downloadFileName = "BUY_PLNPROD_DATA_WTC_20191105102146.dat";
			break;
		case "RETEK_POG_ITEM_TW_DNLD":
			downloadFileName = "WTC_hs_fullrange_wtc";
			break;

		case "RETEK_POG_STORE_DNLD":
			downloadFileName = "BUY_PLNSTORE_DATA_WTCHK_20191105103056.dat";
			break;
		case "RETEK_POG_STORE_MY_DNLD":
			downloadFileName = "";
			break; // no file created
		case "RETEK_POG_STORE_SG_DNLD":
			downloadFileName = "BUY_PLNSTORE_DATA_WTC_20191105103325.dat";
			break;
		case "RETEK_PRICE_TAB_ERR_DNLD":
			downloadFileName = "";
			break; // no file created
		case "RETEK_STORE_ITEM_DETAIL_DNLD":
			downloadFileName = "WTC_xx_rsa_upload_";
			break;
		case "RETEK_STORE_ITEM_DTL_DNLD_PH":
			downloadFileName = "";
			break;// no file created
		case "RSIM_PRICE_TAG_DNLD":
			downloadFileName = "WTC_TAG_PLANO_";
			break; // 100+ file created
		case "RSIM_PRICE_TAG_DNLD_DELTA":
			downloadFileName = "WTC_TAG_PLANO_DELTA_";
			break;
		case "RSIM_PRICE_TAG_DNLD_FL":
			downloadFileName = "WTC_TAG_PLANO_";
			break; // 100+ file created
		case "RSIM_PRICE_TAG_DNLD_MFL":
			downloadFileName = "WTCTH_TAG_";
			break;
		case "SPACE_RK_FIXTURE_DNLD":
			downloadFileName = "RK_FIXTURE_";
			break;
		case "SPACE_RK_POG_DNLD":
			downloadFileName = "RK_POG_WTC";
			break;
		case "SPACE_RK_POG_MODULE_DNLD":
			downloadFileName = "RK_POG_MODULE_WTC_";
			break;
		case "SPACE_RK_PROD_STORE_DNLD":
			downloadFileName = "RK_PROD_STORE_";
			break;
		case "SPACE_RK_STORE_FIXTURE_DNLD":
			downloadFileName = "RK_STORE_FIXTURE_WTC_";
			break;
		case "SPACE_RK_STORE_POG_MODULE_DNLD":
			downloadFileName = "RK_STORE_POG_MODULE_WTC_";
			break;

		case "SPACE_RK_STORE_POG_PROD_DNLD":
			downloadFileName = "RK_STORE_POG_PROD_WTC_";
			break;
		case "SPACEMAN_ITEM_DIM_DNLD":
			downloadFileName = "space_item_dim_WTC_";
			break;
		case "SPACEMAN_ITEM_MAS_DNLD":
			downloadFileName = "space_item_master_";
			break;
		case "SPACEMAN_POG_STORE_DNLD":
			downloadFileName = "SPACE_MAN_WTC_";
			break;
		case "STORE_FIXTURE_POG_JSON_DNLD":
			downloadFileName = "SPACE_IMANAGE_STORE_POG_";
			break;
		case "STORE_PORTAL_POG_DNLD":
			downloadFileName = "WTC_POG_REGULAR_";
			break;
		}
		return downloadFileName;
	}

}